global proc MakeCrtls(int $index)
{
    string $SelectedObj[] = `ls -selection`;

    for ($sel in $SelectedObj)
    {
    string $crtls[] = `circle -name` ($sel + "_Crtl")`;
    string $crlt = $crtls[0];
    Color Controls($crtl, $index);
    }
    
    //for loop? needed to run through the selection and:

    /*create a control and control group
    match orientations to jnts in selection
    rename controls to fit jnts
    have the modularity to not run on a selection in which case
    the controls are set at the origin*/
    
    return MakeCrtls
    
}

global proc colorCrtls(string $Crtl, int $color())
{
    //Sets color index of the conrtol

    string $shapes[];

    //find the shape node of Crtl
    $shapes = `listRelatives -shapes $Crtl`;
    //enable override on $shape
    for ($shape in $shapes)
    {
        if (`nodeType $Shape` == "nurbsCurve")
        {
            setAttr ($shape + ".overrideEnabled") 1;
            setAttr ($shape = ".overrideColor") $color;
        }
        else
        {
            warning("selected object is not a curve.");
        }

    }
    //set $Crtl color to $color
}
//run script to this point to load funtion into Maya
source ContolMaker
colorCrtls("nurbsCircle1", 12)





    /*
        loop to determine type of contols and
        assign a color based on: name and color type stored in an array
    */

    //create the same functions but capacity to assign a different control shape: circle, square, diamond, and i would
    //like to do the inverted circle squiggle for pole vecotrs we did last year






}

circle -c 0 0 0 -nr 0 1 0 -sw 360 -r 1 -d 3 -ut 0 -tol 0.1 -s 8 -ch 1; objectMoveCommand;0

setAttr "nurbsCircleShape1.overrideEnabled" 1;
setAttr nurbsCircle1.overrideColor 9;



